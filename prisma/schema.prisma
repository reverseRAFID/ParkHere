generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  provider          Json?
  /// Field referred in an index, but found no data to define the type.
  providerAccountId Json?

  @@unique([provider, providerAccountId])
}

model Parking {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                DateTime @db.Date
  heavyVehicleCapacity     BigInt
  heavyVehicleRate         Float
  lightVehicleCapacity     BigInt
  lightVehicleRate         Float
  location                 Float[]
  locationAddress          String
  motorbikeBicycleCapacity BigInt
  motorbikeBicycleRate     Float
  parkingName              String
  updatedAt                DateTime @db.Date

  parkingslots Parkingslot[]
  reservations Reservation[]
}

model Parkingslot {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  parkingType       String
  parkingSlotNumber String
  isOccupied        Boolean
  parkingId         String   @db.ObjectId
  createdAt         DateTime @db.Date
  updatedAt         DateTime @db.Date

  parking Parking @relation(fields: [parkingId], references: [id])

  Reservation Reservation[]
}

model Payment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  Reservation Reservation[]
}

model Reservation {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  parkingId            String   @db.ObjectId
  parkingSlotId        String   @db.ObjectId
  userId               String   @db.ObjectId
  vehicleProfileId     String   @db.ObjectId
  reservationStartTime DateTime @db.Date
  reservationEndTime   DateTime @db.Date
  reservationStatus    String
  reservationType      String
  paymentId            String   @db.ObjectId

  parking        Parking        @relation(fields: [parkingId], references: [id])
  parkingSlot    Parkingslot    @relation(fields: [parkingSlotId], references: [id])
  user           User           @relation(fields: [userId], references: [id])
  vehicleProfile VehicleProfile @relation(fields: [vehicleProfileId], references: [id])
  payment        Payment        @relation(fields: [paymentId], references: [id])
}

model Reward {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  sessionToken Json?  @unique
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  email     String   @unique
  name      String
  password  String
  role      String
  updatedAt DateTime @db.Date

  Reservation Reservation[]
}

model VehicleProfile {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  licensePlate Json?  @unique

  Reservation Reservation[]
}

model VerificationToken {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  /// Field referred in an index, but found no data to define the type.
  identifier Json?
  /// Field referred in an index, but found no data to define the type.
  token      Json?

  @@unique([identifier, token])
}
